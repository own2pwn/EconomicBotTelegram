// Telegram settings

var TelegramBot = require('node-telegram-bot-api');
var token = 'TOKEN';
var bot = new TelegramBot(token, { polling: true });

// Require some plugins...

var request = require('request');
var fs = require('fs');
var path = require('path');
var http = require('http');
var xml2js = require('xml2js');

var config = require('./config');

// Fuck the date

var date = new Date();
var today = (date.getMonth() + 1) + "." + date.getDate() + "." + date.getFullYear();

// Time in ms

var oneMinute = 60000;
var oneHour = oneMinute * 60;
var halfDay = oneHour * 12
var oneDay = halfDay * 2;

// Parsing xml

setInterval(function downloadXML () {
  var file = fs.createWriteStream("xml/file.xml");
  var request = http.get("http://www.cbr.ru/scripts/XML_daily.asp", function(response) {
    response.pipe(file);
  });

  if (file)
    console.log('–ü–∞—Ä—Å–∏–Ω–≥ XML-—Ñ–∞–π–ª–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ')
  else
    console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞')
}, halfDay);

// Commands

bot.on('message', function (msg) {
  if (msg.text === "/start") { // /start
    var settings = {
      parse_mode: 'markdown',
      reply_markup: JSON.stringify({
        keyboard: [
          [config.course, config.converter],
          [config.author]
        ]
      })
    }

    bot.sendMessage(msg.from.id, "*–ü—Ä–∏–≤–µ—Ç, " + msg.from.username + "*! –° –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –∞ —Ç–∞–∫–∂–µ —Å–¥–µ–ª–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç –∏–∑ –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã –≤ –¥—Ä—É–≥—É—é.", settings);
  } else if (msg.text === config.course) { // /course
    var settings = {
      reply_markup: JSON.stringify({
        keyboard: [
          [config.courseUSD, config.courseEUR],
          [config.courseBYN, config.courseUAH],
          [config.cancel]
        ]
      })
    }

    bot.sendMessage(msg.from.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", settings);
  } else if (msg.text === config.converter) { // /convert
    var settings = {
      reply_markup: JSON.stringify({
        keyboard: [
          [config.convertUSDRUB, config.convertEURRUB],
          [config.convertBYNRUB, config.convertUAHRUB]
        ]
      })
    }

    bot.sendMessage(msg.from.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", settings);
  } else if (msg.text === config.author) { // /author
    var settings = {
      parse_mode: 'markdown',
      reply_markup: JSON.stringify({
        force_reply: true
      })
    };

    bot.sendMessage(msg.from.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", settings)
      .then(function (send) {
        bot.onReplyToMessage(send.chat.id, send.message_id, function(message) {
          var settings = {
            parse_mode: 'markdown',
            reply_markup: JSON.stringify({
              keyboard: [
                [config.course, config.converter],
                [config.author]
              ]
            })
          };

          // Send message to admin
          bot.sendMessage(91990226, "*–ü–∏—Å—å–º–æ –æ—Ç @EconomicallysBot:*\n\n" + "–û—Ç: @" + msg.chat.username + "\n\n" + message.text, settings);
          // Sended
          bot.sendMessage(msg.from.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.");
        });
    });
  } else if (msg.text === config.cancel) {
    var settings = {
      parse_mode: 'markdown',
      reply_markup: JSON.stringify({
        keyboard: [
          [config.course, config.converter],
          [config.author]
        ]
      })
    };

    bot.sendMessage(msg.from.id, "–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±–¥—å –¥—Ä—É–≥–æ–µ.", settings);
  }

  // Courses
  else if (msg.text === config.courseUSD)
    convertSomething('usd'); // –î–æ–ª–ª–∞—Ä—ã
  else if (msg.text === config.courseEUR)
    convertSomething('euro'); // –ï–≤—Ä–æ
  else if (msg.text === config.courseBYN)
    convertSomething('byn'); // –ë–µ–ª. —Ä—É–±
  else if (msg.text === config.courseUAH)
    convertSomething('uah'); // –ì—Ä–∏–≤–Ω—ã
  
  // Converting
  else if (msg.text === config.convertUSDRUB) {
    var settings = {
      reply_markup: JSON.stringify({
        force_reply: true
      })
    };

    bot.sendMessage(msg.from.id, "–°–∫–æ–ª—å–∫–æ –¥–æ–ª–ª–∞—Ä–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Ä—É–±–ª–∏?", settings)
      .then(function(send) {
        bot.onReplyToMessage(send.chat.id, send.message_id, function(message) {
          if (/^\d+$/.test(message.text))
            convertSomething('usd', 'convert', message.text); // –ö–æ–Ω–≤–µ—Ä—Ç –∏–∑ –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ —Ä—É–±–ª–∏
          else
            bot.sendMessage(msg.from.id, config.errorNoNumber);
        });
      })
  } else if (msg.text === config.convertEURRUB) {
    var settings = {
      reply_markup: JSON.stringify({
        force_reply: true
      })
    };

    bot.sendMessage(msg.from.id, "–°–∫–æ–ª—å–∫–æ –µ–≤—Ä–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Ä—É–±–ª–∏?", settings)
      .then(function(send) {
        bot.onReplyToMessage(send.chat.id, send.message_id, function(message) {
          if (/^\d+$/.test(message.text))
            convertSomething('euro', 'convert', message.text); // –ö–æ–Ω–≤–µ—Ä—Ç –∏–∑ –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ —Ä—É–±–ª–∏
          else
            bot.sendMessage(msg.from.id, config.errorNoNumber);
        });
      })
  } else if (msg.text === config.convertBYNRUB) {
    var settings = {
      reply_markup: JSON.stringify({
        force_reply: true
      })
    };

    bot.sendMessage(msg.from.id, "–°–∫–æ–ª—å–∫–æ –±–µ–ª–æ—Ä—É—Å—Å–∫–∏—Ö —Ä—É–±–ª–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Ä—É–±–ª–∏?", settings)
      .then(function(send) {
        bot.onReplyToMessage(send.chat.id, send.message_id, function(message) {
          if (/^\d+$/.test(message.text))
            convertSomething('byn', 'convert', message.text); // –ö–æ–Ω–≤–µ—Ä—Ç –∏–∑ –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ —Ä—É–±–ª–∏
          else
            bot.sendMessage(msg.from.id, config.errorNoNumber);
        });
      })
  } else if (msg.text === config.convertUAHRUB) {
    var settings = {
      reply_markup: JSON.stringify({
        force_reply: true
      })
    };

    bot.sendMessage(msg.from.id, "–°–∫–æ–ª—å–∫–æ –≥—Ä–∏–≤–µ–Ω –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Ä—É–±–ª–∏?", settings)
      .then(function(send) {
        bot.onReplyToMessage(send.chat.id, send.message_id, function(message) {
          if (/^\d+$/.test(message.text))
            convertSomething('uah', 'convert', message.text); // –ö–æ–Ω–≤–µ—Ä—Ç –∏–∑ –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ —Ä—É–±–ª–∏
          else
            bot.sendMessage(msg.from.id, config.errorNoNumber);
        });
      })
  }

  // Converting function
  function convertSomething (currency, toDo, value) {
    var parser = new xml2js.Parser();

    fs.readFile(__dirname + '/xml/file.xml', function(err, data) {
      parser.parseString(data, function(err, result) {
        // Keyboard for courses
        var settingsForResultsOfCourses = {
          parse_mode: 'markdown',
          reply_markup: JSON.stringify({
            keyboard: [
              [config.courseUSD, config.courseEUR],
              [config.courseBYN, config.courseUAH],
              [config.cancel]
            ]
          })
        };

        // Keyboard for convert
        var settingsForResultsOfConvert = {
          parse_mode: 'markdown',
          reply_markup: JSON.stringify({
            keyboard: [
              [config.convertUSDRUB, config.convertEURRUB],
              [config.convertBYNRUB, config.convertUAHRUB],
              [config.cancel]
            ]
          })
        };

        if (currency == 'usd') {
          var usd = (parseFloat(result.ValCurs.Valute[9].Value[0].replace(',', '.'))).toFixed(2); // formating course
          var summa = (usd * value).toFixed(2);
          
          // What we must do? Convert or no?

          if (toDo == 'convert')
            bot.sendMessage(msg.from.id, "üá±üá∑ *" + value + " USD:* " + summa + " —Ä—É–±.", settingsForResultsOfConvert) // Converting
          else
            bot.sendMessage(msg.from.id,  "*–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –¶–ë –Ω–∞ " + today + "*\n\n"
                                          + "üá±üá∑ *USD* - " + usd + " —Ä—É–±.", settingsForResultsOfCourses); // Only course
        } else if (currency == 'euro') {
          var euro = (parseFloat(result.ValCurs.Valute[10].Value[0].replace(',', '.'))).toFixed(2); // formating course
          var summa = (euro * value).toFixed(2);

          // What we must do? Convert or no?

         if (toDo == 'convert')
            bot.sendMessage(msg.from.id, "üá´üá≤ *" + value + " EURO:* " + summa + " —Ä—É–±.", settingsForResultsOfConvert) // Converting
          else
            bot.sendMessage(msg.from.id,  "*–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –¶–ë –Ω–∞ " + today + "*\n\n"
                                          + "üá´üá≤ *EUR* - " + euro + " —Ä—É–±.", settingsForResultsOfCourses); // Only course
        } else if (currency == 'byn') {
          var byn = (parseFloat(result.ValCurs.Valute[4].Value[0].replace(',', '.'))).toFixed(2); // formating course
          var summa = (byn * value).toFixed(2);

          // What we must do? Convert or no?

          if (toDo == 'convert')
            bot.sendMessage(msg.from.id, "üáßüáæ *" + value + " BYN:* " + summa + " —Ä—É–±.", settingsForResultsOfConvert) // Converting
          else
            bot.sendMessage(msg.from.id,  "*–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –¶–ë –Ω–∞ " + today + "*\n\n"
                                          + "üáßüáæ *BYN* - " + byn + " —Ä—É–±.", settingsForResultsOfCourses); // Only course
        } else if (currency == 'uah') {
          var uah = (parseFloat((result.ValCurs.Valute[26].Value[0].replace(',', '.')) * 0.1)).toFixed(2); // formating course
          var summa = (uah * value).toFixed(2);

          // What we must do? Convert or no?

          if (toDo == 'convert')
            bot.sendMessage(msg.from.id, "üá∫üá¶ *" + value + " UAH:* " + summa + " —Ä—É–±.", settingsForResultsOfConvert) // Converting
          else
            bot.sendMessage(msg.from.id,  "*–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –¶–ë –Ω–∞ " + today + "*\n\n"
                                          + "üá∫üá¶ *UAH* - " + uah + " —Ä—É–±.", settingsForResultsOfCourses); // Only course
        }
      });
    });
  }
});